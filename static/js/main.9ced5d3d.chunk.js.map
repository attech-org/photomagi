{"version":3,"sources":["redux/app/types.ts","redux/app/actions.ts","App.tsx","redux/app/reducer.ts","redux/store.ts","index.tsx"],"names":["AppActions","Wrapper","styled","Layout","App","dispatch","useDispatch","count","useSelector","store","app","counter","fighters","fetchUsers","a","fetch","result","json","data","value","type","SET_FIGHTERS","payload","Header","Content","onClick","INC_COUNTER","shape","DEC_COUNTER","align","map","name","source","attack","defense","health","hoverable","style","width","cover","alt","src","Meta","title","description","Footer","initialStore","action","rootReducer","combineReducers","middlewares","push","thunk","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mHAEYA,E,gIAAAA,K,0BAAAA,E,0BAAAA,E,6BAAAA,M,KCGL,I,UCGDC,EAAUC,YAAOC,IAAPD,CAAH,2EAuDEE,EAlDsB,WACnC,IAAMC,EAAWC,cACXC,EAAQC,aAA4C,SAACC,GAAD,OAAWA,EAAMC,IAAIC,WACzEC,EAAWJ,aAA6C,SAACC,GAAD,OAAWA,EAAMC,IAAIE,YAU7EC,EAAU,uCAAG,sBAAAC,EAAA,sDACjBT,EDPwB,uCAAM,WAAOA,GAAP,iBAAAS,EAAA,sEACXC,MACnB,kJAF8B,cAC1BC,EAD0B,gBAIbA,EAAOC,OAJM,OAI1BC,EAJ0B,OAKhCb,GAV0Bc,EAULD,EAV2C,CAChEE,KAAMpB,EAAWqB,aACjBC,QAASH,KAGuB,iCALP,IAACA,IAKM,OAAN,uDCMP,2CAAH,qDAIhB,OACE,eAAClB,EAAD,WACE,cAAC,IAAOsB,OAAR,qBACA,eAAC,IAAOC,QAAR,WACE,cAAC,IAAD,CAAQC,QAhBI,WDbW,IAACN,ECc5Bd,GDd4Bc,ECcH,EDdsC,CACjEC,KAAMpB,EAAW0B,YACjBJ,QAASH,MC2ByBQ,MAAM,SAAlC,eAGCpB,EACD,cAAC,IAAD,CAAQkB,QAhBI,WDZW,IAACN,ECa5Bd,GDb4Bc,ECaH,EDbsC,CACjEC,KAAMpB,EAAW4B,YACjBN,QAASH,MC0ByBQ,MAAM,SAAlC,eAGA,cAAC,IAAD,CAAQF,QAASZ,EAAjB,2BACA,cAAC,IAAD,CAAOgB,MAAM,SAAb,SACGjB,EAASkB,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,OAAlC,OACZ,cAAC,IAAD,CAEEC,WAAS,EACTC,MAAO,CAAEC,MAAO,KAChBC,MAAO,qBAAKC,IAAI,UAAUC,IAAKT,IAJjC,SAME,cAAC,IAAKU,KAAN,CACEC,MAAOZ,EACPa,YAAW,kBAAaX,EAAb,qBAAgCC,EAAhC,oBAAmDC,MAP3DJ,WAab,cAAC,IAAOc,OAAR,yB,iCC3CAC,EAAyB,CAC7BnC,QAAS,EACTC,SAAU,IAgBGF,EAbH,WAAmD,IAAlDD,EAAiD,uDAAzCqC,EAAcC,EAA2B,uCAC5D,OAAQA,EAAO3B,MACb,KAAKpB,EAAW0B,YACd,OAAO,2BAAKjB,GAAZ,IAAmBE,QAASF,EAAME,QAAUoC,EAAOzB,UACrD,KAAKtB,EAAW4B,YACd,OAAO,2BAAKnB,GAAZ,IAAmBE,QAASF,EAAME,QAAUoC,EAAOzB,UACrD,KAAKtB,EAAWqB,aACd,OAAO,2BAAKZ,GAAZ,IAAmBG,SAAUmC,EAAOzB,UACtC,QACE,OAAOb,ICvBPuC,EAAcC,YAAgB,CAClCvC,QAGIwC,EAAc,GAEpBA,EAAYC,KAAKC,KAMFC,kBAAYL,EAAaM,IAAe,WAAf,EAAmBJ,I,OCT3DK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUhD,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJiD,SAASC,eAAe,W","file":"static/js/main.9ced5d3d.chunk.js","sourcesContent":["import { Fighter } from './reducer';\n\nexport enum AppActions {\n  INC_COUNTER = 'INC_COUNTER',\n  DEC_COUNTER = 'DEC_COUNTER',\n  SET_FIGHTERS = 'SET_FIGHTERS',\n}\n\ninterface IncreaseCounterAction {\n  type: AppActions.INC_COUNTER;\n  payload: number;\n}\n\ninterface DecreaseCounterAction {\n  type: AppActions.DEC_COUNTER;\n  payload: number;\n}\n\ninterface AddFightersAction {\n  type: AppActions.SET_FIGHTERS;\n  payload: Fighter[];\n}\n\nexport type AppActionTypes = IncreaseCounterAction | DecreaseCounterAction | AddFightersAction;\n","import { Dispatch } from 'react';\n\nimport { Fighter } from './reducer';\nimport { AppActionTypes, AppActions } from './types';\n\nexport const increaseCounter = (value: number): AppActionTypes => ({\n  type: AppActions.INC_COUNTER,\n  payload: value,\n});\n\nexport const decreaseCounter = (value: number): AppActionTypes => ({\n  type: AppActions.DEC_COUNTER,\n  payload: value,\n});\n\nexport const setFighters = (value: Fighter[]): AppActionTypes => ({\n  type: AppActions.SET_FIGHTERS,\n  payload: value,\n});\n\nexport const loadFighters = () => async (dispatch: Dispatch<AppActionTypes>) => {\n  const result = await fetch(\n    'https://gist.githubusercontent.com/alexandrtovmach/3fcf6c0819d6830e21b5f3c117c2c5aa/raw/0b00273489dbf90980296d0908183fc3494c2ad4/userlist.json',\n  );\n  const data = await result.json();\n  dispatch(setFighters(data));\n};\n","import { Button, Card, Layout, Space } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { decreaseCounter, increaseCounter, loadFighters } from './redux/app/actions';\nimport { AppStore } from './redux/app/reducer';\nimport { RootStore } from './redux/store';\n\nconst Wrapper = styled(Layout)`\n  background-color: violet;\n  height: 100vh;\n`;\n\nconst App: React.FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const count = useSelector<RootStore, AppStore['counter']>((store) => store.app.counter);\n  const fighters = useSelector<RootStore, AppStore['fighters']>((store) => store.app.fighters);\n\n  const handleInc = () => {\n    dispatch(increaseCounter(1));\n  };\n\n  const handleDec = () => {\n    dispatch(decreaseCounter(1));\n  };\n\n  const fetchUsers = async () => {\n    dispatch(loadFighters());\n  };\n\n  return (\n    <Wrapper>\n      <Layout.Header>Header</Layout.Header>\n      <Layout.Content>\n        <Button onClick={handleInc} shape=\"circle\">\n          +\n        </Button>\n        {count}\n        <Button onClick={handleDec} shape=\"circle\">\n          -\n        </Button>\n        <Button onClick={fetchUsers}>Get All Users</Button>\n        <Space align=\"center\">\n          {fighters.map(({ name, source, attack, defense, health }) => (\n            <Card\n              key={name}\n              hoverable\n              style={{ width: 240 }}\n              cover={<img alt=\"example\" src={source} />}\n            >\n              <Card.Meta\n                title={name}\n                description={`Attack: ${attack} Defence: ${defense} Health: ${health}`}\n              />\n            </Card>\n          ))}\n        </Space>\n      </Layout.Content>\n      <Layout.Footer>Footer</Layout.Footer>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { AppActionTypes, AppActions } from './types';\n\nexport interface Fighter {\n  attack: number;\n  defense: number;\n  health: number;\n  name: string;\n  source: string;\n}\n\nexport interface AppStore {\n  counter: number;\n  fighters: Fighter[];\n}\n\nconst initialStore: AppStore = {\n  counter: 0,\n  fighters: [],\n};\n\nconst app = (store = initialStore, action: AppActionTypes) => {\n  switch (action.type) {\n    case AppActions.INC_COUNTER:\n      return { ...store, counter: store.counter + action.payload };\n    case AppActions.DEC_COUNTER:\n      return { ...store, counter: store.counter - action.payload };\n    case AppActions.SET_FIGHTERS:\n      return { ...store, fighters: action.payload };\n    default:\n      return store;\n  }\n};\n\nexport default app;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport app from './app/reducer';\n\nconst rootReducer = combineReducers({\n  app,\n});\n\nconst middlewares = [];\n\nmiddlewares.push(thunk);\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport default createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport type RootStore = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './redux/store';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}