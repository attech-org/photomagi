{"version":3,"sources":["redux/app/types.ts","redux/app/actions.ts","App.tsx","redux/app/reducer.ts","redux/store.ts","index.tsx"],"names":["AppActions","Wrapper","styled","Layout","App","dispatch","useDispatch","count","useSelector","store","app","counter","Header","Content","onClick","value","type","INC_COUNTER","payload","shape","DEC_COUNTER","Footer","initialStore","action","rootReducer","combineReducers","middlewares","push","thunk","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kHAAYA,E,mFAAAA,K,0BAAAA,E,2BAAAA,M,KCEL,I,SCMDC,EAAUC,YAAOC,IAAPD,CAAH,2EAkCEE,EA7BsB,WACnC,IAAMC,EAAWC,cACXC,EAAQC,aAA4C,SAACC,GAAD,OAAWA,EAAMC,IAAIC,WAU/E,OACE,eAACV,EAAD,WACE,cAAC,IAAOW,OAAR,qBACA,eAAC,IAAOC,QAAR,WACE,cAAC,IAAD,CAAQC,QAZI,WDfW,IAACC,ECgB5BV,GDhB4BU,ECgBH,EDhBsC,CACjEC,KAAMhB,EAAWiB,YACjBC,QAASH,MCyByBI,MAAM,SAAlC,eAGCZ,EACD,cAAC,IAAD,CAAQO,QAZI,WDdW,IAACC,ECe5BV,GDf4BU,ECeH,EDfsC,CACjEC,KAAMhB,EAAWoB,YACjBF,QAASH,MCwByBI,MAAM,SAAlC,kBAIF,cAAC,IAAOE,OAAR,yB,gCC/BAC,EAAyB,CAC7BX,QAAS,GAcID,EAXH,WAAmD,IAAlDD,EAAiD,uDAAzCa,EAAcC,EAA2B,uCAC5D,OAAQA,EAAOP,MACb,KAAKhB,EAAWiB,YACd,OAAO,2BAAKR,GAAZ,IAAmBE,QAASF,EAAME,QAAUY,EAAOL,UACrD,KAAKlB,EAAWoB,YACd,OAAO,2BAAKX,GAAZ,IAAmBE,QAASF,EAAME,QAAUY,EAAOL,UACrD,QACE,OAAOT,ICXPe,EAAcC,YAAgB,CAClCf,QAGIgB,EAAc,GAEpBA,EAAYC,KAAKC,KAMFC,kBAAYL,EAAaM,IAAe,WAAf,EAAmBJ,I,MCT3DK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUxB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJyB,SAASC,eAAe,W","file":"static/js/main.6a50b241.chunk.js","sourcesContent":["export enum AppActions {\n  INC_COUNTER = 'INC_COUNTER',\n  DEC_COUNTER = 'DEC_COUNTER',\n}\n\ninterface IncreaseCounterAction {\n  type: AppActions.INC_COUNTER;\n  payload: number;\n}\n\ninterface DecreaseCounterAction {\n  type: AppActions.DEC_COUNTER;\n  payload: number;\n}\n\nexport type AppActionTypes = IncreaseCounterAction | DecreaseCounterAction;\n","import { AppActionTypes, AppActions } from './types';\n\nexport const increaseCounter = (value: number): AppActionTypes => ({\n  type: AppActions.INC_COUNTER,\n  payload: value,\n});\n\nexport const decreaseCounter = (value: number): AppActionTypes => ({\n  type: AppActions.DEC_COUNTER,\n  payload: value,\n});\n","import { Button, Layout } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\n\nimport { decreaseCounter, increaseCounter } from './redux/app/actions';\nimport { AppStore } from './redux/app/reducer';\nimport { RootStore } from './redux/store';\n\nconst Wrapper = styled(Layout)`\n  background-color: violet;\n  height: 100vh;\n`;\n\nconst App: React.FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const count = useSelector<RootStore, AppStore['counter']>((store) => store.app.counter);\n\n  const handleInc = () => {\n    dispatch(increaseCounter(1));\n  };\n\n  const handleDec = () => {\n    dispatch(decreaseCounter(1));\n  };\n\n  return (\n    <Wrapper>\n      <Layout.Header>Header</Layout.Header>\n      <Layout.Content>\n        <Button onClick={handleInc} shape=\"circle\">\n          +\n        </Button>\n        {count}\n        <Button onClick={handleDec} shape=\"circle\">\n          -\n        </Button>\n      </Layout.Content>\n      <Layout.Footer>Footer</Layout.Footer>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { AppActionTypes, AppActions } from './types';\n\nexport interface AppStore {\n  counter: number;\n}\n\nconst initialStore: AppStore = {\n  counter: 0,\n};\n\nconst app = (store = initialStore, action: AppActionTypes) => {\n  switch (action.type) {\n    case AppActions.INC_COUNTER:\n      return { ...store, counter: store.counter + action.payload };\n    case AppActions.DEC_COUNTER:\n      return { ...store, counter: store.counter - action.payload };\n    default:\n      return store;\n  }\n};\n\nexport default app;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport app from './app/reducer';\n\nconst rootReducer = combineReducers({\n  app,\n});\n\nconst middlewares = [];\n\nmiddlewares.push(thunk);\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport default createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport type RootStore = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './redux/store';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}