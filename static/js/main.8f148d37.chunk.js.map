{"version":3,"sources":["redux/app/types.ts","redux/app/actions.ts","App.tsx","redux/app/reducer.ts","redux/store.ts","index.tsx"],"names":["AppActions","general","css","rotate","Wrapper","styled","Layout","Content","FighterCard","Card","props","FighterCardMeta","Meta","BigFighterCard","StyledFighterImage","Image","FightersPanel","Space","ControlPanel","Arena","App","dispatch","useDispatch","fighters","useSelector","store","app","useState","selectedFighters","onSelectedFightersChange","fighter1","fighter2","onSelectedFightersFullChange","isFighting","onFightingStateChange","useEffect","map","name","find","el","fetchUsers","a","fetch","result","json","data","value","type","SET_FIGHTERS","payload","Header","align","cover","alt","src","source","title","description","attack","defense","health","length","aria-colindex","indexOf","onClick","fighterName","includes","filter","disabled","danger","size","initialStore","counter","action","INC_COUNTER","DEC_COUNTER","rootReducer","combineReducers","middlewares","push","thunk","createStore","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mHAEYA,E,mKAAAA,K,0BAAAA,E,0BAAAA,E,6BAAAA,M,KCGL,I,8BCIDC,EAAUC,YAAH,mFAMPC,EAASD,YAAH,4MAaNE,EAAUC,YAAOC,IAAPD,CAAH,oDACTJ,GAIEM,EAAUF,YAAOC,IAAOC,QAAdF,CAAH,qUASPG,EAAcH,YAAOI,IAAPJ,CAAH,iIAID,SAACK,GACb,OAA+B,IAA3BA,EAAM,iBACD,iBAEsB,IAA3BA,EAAM,iBACD,kBAEF,UAILC,EAAkBN,YAAOI,IAAKG,KAAZP,CAAH,0BAEfQ,EAAiBR,YAAOG,EAAPH,CAAH,+IAQdS,EAAqBT,YAAOU,IAAPV,CAAH,oFAMlBW,EAAgBX,YAAOY,IAAPZ,CAAH,mHAOba,EAAeb,YAAOY,IAAPZ,CAAH,6JASZc,EAAQd,YAAOY,IAAPZ,CAAH,sGACPF,GA2FWiB,EArFsB,WACnC,IAAMC,EAAWC,cACXC,EAAWC,aAA6C,SAACC,GAAD,OAAWA,EAAMC,IAAIH,YAF1C,EAGYI,mBAAmB,IAH/B,mBAGlCC,EAHkC,KAGhBC,EAHgB,OAIoBF,mBAAoB,IAJxC,yCAIjCG,EAJiC,KAIvBC,EAJuB,KAIZC,EAJY,OAKGL,oBAAkB,GALrB,mBAKlCM,EALkC,KAKtBC,EALsB,KAOzCC,qBAAU,WACRH,EACEJ,EAAiBQ,KAAI,SAACC,GAAD,OAAUd,EAASe,MAAK,SAACC,GAAD,OAAQA,EAAGF,OAASA,WAElE,CAACT,IAEJ,IAAMY,EAAU,uCAAG,sBAAAC,EAAA,sDACjBpB,ED1FwB,uCAAM,WAAOA,GAAP,iBAAAoB,EAAA,sEACXC,MACnB,kJAF8B,cAC1BC,EAD0B,gBAIbA,EAAOC,OAJM,OAI1BC,EAJ0B,OAKhCxB,GAV0ByB,EAULD,EAV2C,CAChEE,KAAM/C,EAAWgD,aACjBC,QAASH,KAGuB,iCALP,IAACA,IAKM,OAAN,uDCyFP,2CAAH,qDAehB,OACE,eAAC1C,EAAD,WACE,cAAC,IAAO8C,OAAR,qBACA,eAAC3C,EAAD,WACG0B,EACC,eAACd,EAAD,CAAOgC,MAAM,SAAb,UACE,cAACtC,EAAD,CAAgBuC,MAAO,cAACtC,EAAD,CAAoBuC,IAAI,UAAUC,IAAKxB,EAASyB,SAAvE,SACE,cAAC5C,EAAD,CACE6C,MAAO1B,EAASO,KAChBoB,YAAW,kBAAa3B,EAAS4B,OAAtB,qBAAyC5B,EAAS6B,QAAlD,oBAAqE7B,EAAS8B,YAG7F,cAAC/C,EAAD,CAAgBuC,MAAO,cAACtC,EAAD,CAAoBuC,IAAI,UAAUC,IAAKvB,EAASwB,SAAvE,SACE,cAAC5C,EAAD,CACE6C,MAAOzB,EAASM,KAChBoB,YAAW,kBAAa1B,EAAS2B,OAAtB,qBAAyC3B,EAAS4B,QAAlD,oBAAqE5B,EAAS6B,eAK/F,cAAC5C,EAAD,UACGO,EAASsC,OACRtC,EAASa,KAAI,gBAAGC,EAAH,EAAGA,KAAMkB,EAAT,EAASA,OAAQG,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAASC,EAAlC,EAAkCA,OAAlC,OACX,cAACpD,EAAD,CAEEsD,gBAAelC,EAAiBmC,QAAQ1B,GACxC2B,QAAS,kBAnCGC,EAmCsB5B,EAlC5CT,EAAiBiC,OAAS,GAC5BhC,EAAyB,GAAD,mBAAKD,GAAL,CAAuBqC,UAE7CrC,EAAiBsC,SAASD,IAC5BpC,EAAyBD,EAAiBuC,QAAO,SAAC9B,GAAD,OAAUA,IAAS4B,OAL7C,IAACA,GAoCZb,MAAO,cAACtC,EAAD,CAAoBuC,IAAI,UAAUC,IAAKC,IAJhD,SAME,cAAC5C,EAAD,CACE6C,MAAOnB,EACPoB,YAAW,kBAAaC,EAAb,qBAAgCC,EAAhC,oBAAmDC,MAP3DvB,MAYT,cAAC,IAAD,CAAQ2B,QAASxB,EAAjB,6BAIN,cAAC,IAAD,IACA,cAACtB,EAAD,UACE,cAAC,IAAD,CACE8C,QAtDe,kBAAM9B,GAAuBD,IAuD5CmC,SAAUxC,EAAiBiC,OAAS,EACpCd,KAAK,UACLsB,QAAM,EACNC,KAAK,QALP,6B,kCCvJJC,EAAyB,CAC7BC,QAAS,EACTjD,SAAU,IAgBGG,EAbH,WAAmD,IAAlDD,EAAiD,uDAAzC8C,EAAcE,EAA2B,uCAC5D,OAAQA,EAAO1B,MACb,KAAK/C,EAAW0E,YACd,OAAO,2BAAKjD,GAAZ,IAAmB+C,QAAS/C,EAAM+C,QAAUC,EAAOxB,UACrD,KAAKjD,EAAW2E,YACd,OAAO,2BAAKlD,GAAZ,IAAmB+C,QAAS/C,EAAM+C,QAAUC,EAAOxB,UACrD,KAAKjD,EAAWgD,aACd,OAAO,2BAAKvB,GAAZ,IAAmBF,SAAUkD,EAAOxB,UACtC,QACE,OAAOxB,ICvBPmD,EAAcC,YAAgB,CAClCnD,QAGIoD,EAAc,GAEpBA,EAAYC,KAAKC,KAMFC,kBAAYL,EAAaM,IAAe,WAAf,EAAmBJ,I,OCT3DK,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU5D,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ6D,SAASC,eAAe,W","file":"static/js/main.8f148d37.chunk.js","sourcesContent":["import { Fighter } from './reducer';\n\nexport enum AppActions {\n  INC_COUNTER = 'INC_COUNTER',\n  DEC_COUNTER = 'DEC_COUNTER',\n  SET_FIGHTERS = 'SET_FIGHTERS',\n}\n\ninterface IncreaseCounterAction {\n  type: AppActions.INC_COUNTER;\n  payload: number;\n}\n\ninterface DecreaseCounterAction {\n  type: AppActions.DEC_COUNTER;\n  payload: number;\n}\n\ninterface AddFightersAction {\n  type: AppActions.SET_FIGHTERS;\n  payload: Fighter[];\n}\n\nexport type AppActionTypes = IncreaseCounterAction | DecreaseCounterAction | AddFightersAction;\n","import { Dispatch } from 'react';\n\nimport { Fighter } from './reducer';\nimport { AppActionTypes, AppActions } from './types';\n\nexport const increaseCounter = (value: number): AppActionTypes => ({\n  type: AppActions.INC_COUNTER,\n  payload: value,\n});\n\nexport const decreaseCounter = (value: number): AppActionTypes => ({\n  type: AppActions.DEC_COUNTER,\n  payload: value,\n});\n\nexport const setFighters = (value: Fighter[]): AppActionTypes => ({\n  type: AppActions.SET_FIGHTERS,\n  payload: value,\n});\n\nexport const loadFighters = () => async (dispatch: Dispatch<AppActionTypes>) => {\n  const result = await fetch(\n    'https://gist.githubusercontent.com/alexandrtovmach/3fcf6c0819d6830e21b5f3c117c2c5aa/raw/0b00273489dbf90980296d0908183fc3494c2ad4/userlist.json',\n  );\n  const data = await result.json();\n  dispatch(setFighters(data));\n};\n","import { Button, Card, Divider, Image, Layout, Space } from 'antd';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\n\nimport { loadFighters } from './redux/app/actions';\nimport { AppStore, Fighter } from './redux/app/reducer';\nimport { RootStore } from './redux/store';\n\nconst general = css`\n  .ant-card-body {\n    background-color: white;\n  }\n`;\n\nconst rotate = css`\n  .ant-space-item {\n    .ant-image-img {\n      height: 300px;\n    }\n    &:last-of-type {\n      .ant-image-img {\n        transform: rotateY(180deg);\n      }\n    }\n  }\n`;\n\nconst Wrapper = styled(Layout)`\n  ${general}\n  height: 100vh;\n`;\n\nconst Content = styled(Layout.Content)`\n  background: linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),\n    url('https://cutewallpaper.org/21/street-fighter-background/Street-Fighter-background-Street-fighter-characters-.jpg');\n  background-size: auto 100%;\n  background-position: center;\n  overflow: auto;\n  padding: 5rem;\n`;\n\nconst FighterCard = styled(Card)`\n  margin: 1rem;\n  background-color: rgba(238, 130, 238, 0.4);\n  width: 200px;\n  box-shadow: ${(props) => {\n    if (props['aria-colindex'] === 0) {\n      return '0 0 0 5px blue';\n    }\n    if (props['aria-colindex'] === 1) {\n      return '0 0 0 5px green';\n    }\n    return 'none';\n  }};\n`;\n\nconst FighterCardMeta = styled(Card.Meta)``;\n\nconst BigFighterCard = styled(FighterCard)`\n  width: 300px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst StyledFighterImage = styled(Image)`\n  height: 150px;\n  width: auto;\n  margin: 1rem auto;\n`;\n\nconst FightersPanel = styled(Space)`\n  width: 100%;\n  min-height: 200px;\n  overflow-x: auto;\n  background-color: wheat;\n`;\n\nconst ControlPanel = styled(Space)`\n  width: 100%;\n  overflow-x: auto;\n  background-color: wheat;\n  padding: 1rem;\n  display: flex;\n  justify-content: center;\n`;\n\nconst Arena = styled(Space)`\n  ${rotate}\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst App: React.FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const fighters = useSelector<RootStore, AppStore['fighters']>((store) => store.app.fighters);\n  const [selectedFighters, onSelectedFightersChange] = useState<string[]>([]);\n  const [[fighter1, fighter2], onSelectedFightersFullChange] = useState<Fighter[]>([]);\n  const [isFighting, onFightingStateChange] = useState<boolean>(false);\n\n  useEffect(() => {\n    onSelectedFightersFullChange(\n      selectedFighters.map((name) => fighters.find((el) => el.name === name) as Fighter),\n    );\n  }, [selectedFighters]);\n\n  const fetchUsers = async () => {\n    dispatch(loadFighters());\n  };\n\n  const handleFightClick = () => onFightingStateChange(!isFighting);\n\n  const handleFighterClick = (fighterName: string) => {\n    if (selectedFighters.length < 2) {\n      onSelectedFightersChange([...selectedFighters, fighterName]);\n    }\n    if (selectedFighters.includes(fighterName)) {\n      onSelectedFightersChange(selectedFighters.filter((name) => name !== fighterName));\n    }\n  };\n\n  return (\n    <Wrapper>\n      <Layout.Header>Header</Layout.Header>\n      <Content>\n        {isFighting ? (\n          <Arena align=\"center\">\n            <BigFighterCard cover={<StyledFighterImage alt=\"example\" src={fighter1.source} />}>\n              <FighterCardMeta\n                title={fighter1.name}\n                description={`Attack: ${fighter1.attack} Defence: ${fighter1.defense} Health: ${fighter1.health}`}\n              />\n            </BigFighterCard>\n            <BigFighterCard cover={<StyledFighterImage alt=\"example\" src={fighter2.source} />}>\n              <FighterCardMeta\n                title={fighter2.name}\n                description={`Attack: ${fighter2.attack} Defence: ${fighter2.defense} Health: ${fighter2.health}`}\n              />\n            </BigFighterCard>\n          </Arena>\n        ) : (\n          <FightersPanel>\n            {fighters.length ? (\n              fighters.map(({ name, source, attack, defense, health }) => (\n                <FighterCard\n                  key={name}\n                  aria-colindex={selectedFighters.indexOf(name)}\n                  onClick={() => handleFighterClick(name)}\n                  cover={<StyledFighterImage alt=\"example\" src={source} />}\n                >\n                  <FighterCardMeta\n                    title={name}\n                    description={`Attack: ${attack} Defence: ${defense} Health: ${health}`}\n                  />\n                </FighterCard>\n              ))\n            ) : (\n              <Button onClick={fetchUsers}>Load fighters</Button>\n            )}\n          </FightersPanel>\n        )}\n        <Divider />\n        <ControlPanel>\n          <Button\n            onClick={handleFightClick}\n            disabled={selectedFighters.length < 2}\n            type=\"primary\"\n            danger\n            size=\"large\"\n          >\n            Fight!\n          </Button>\n        </ControlPanel>\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { AppActionTypes, AppActions } from './types';\n\nexport interface Fighter {\n  attack: number;\n  defense: number;\n  health: number;\n  name: string;\n  source: string;\n}\n\nexport interface AppStore {\n  counter: number;\n  fighters: Fighter[];\n}\n\nconst initialStore: AppStore = {\n  counter: 0,\n  fighters: [],\n};\n\nconst app = (store = initialStore, action: AppActionTypes) => {\n  switch (action.type) {\n    case AppActions.INC_COUNTER:\n      return { ...store, counter: store.counter + action.payload };\n    case AppActions.DEC_COUNTER:\n      return { ...store, counter: store.counter - action.payload };\n    case AppActions.SET_FIGHTERS:\n      return { ...store, fighters: action.payload };\n    default:\n      return store;\n  }\n};\n\nexport default app;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport app from './app/reducer';\n\nconst rootReducer = combineReducers({\n  app,\n});\n\nconst middlewares = [];\n\nmiddlewares.push(thunk);\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(logger);\n}\n\nexport default createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport type RootStore = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './redux/store';\n\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}